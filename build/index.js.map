{"version":3,"sources":["../src/index.js"],"names":["posts","myposts","app","PORT","process","env","use","bodyParser","json","listen","console","log","get","req","res","send","post","user","user_id","username","email","jwt","sign","err","token","verifyToken","next","bearerHeader","headers","bearer","split","bearerToken","sendStatus","verify","authData","myPost","body","push","messageRoutes","userRoutes"],"mappings":";;AAAA;;AACA;;AACA;;AAEA;;AAGA;;AACA;;AACA;;AAEA;;;;AANA,IAAIA,KAAK,GAACC,iBAAV;AAQA,IAAMC,GAAG,GAAC,0BAAV;AAEA,IAAMC,IAAI,GAACC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAA/B;AAEAD,GAAG,CAACI,GAAJ,CAAQC,uBAAWC,IAAX,EAAR;AAEAN,GAAG,CAACO,MAAJ,CAAWN,IAAX,EAAiB,YAAI;AACjBO,EAAAA,OAAO,CAACC,GAAR,kCAAsCR,IAAtC;AACH,CAFD;AAIAD,GAAG,CAACU,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAY;AACrBA,EAAAA,GAAG,CAACC,IAAJ,CAAS,oBAAT;AACH,CAFD;AAMAb,GAAG,CAACc,IAAJ,CAAS,QAAT,EAAmB,UAACH,GAAD,EAAMC,GAAN,EAAY;AAC3B,MAAMG,IAAI,GAAC;AACPC,IAAAA,OAAO,EAAE,MADF;AAEPC,IAAAA,QAAQ,EAAC,gBAFF;AAGPC,IAAAA,KAAK,EAAE;AAHA,GAAX;;AAKAC,2BAAIC,IAAJ,CAAS;AAACL,IAAAA,IAAI,EAAJA;AAAD,GAAT,EAAiB,WAAjB,EAA8B,UAASM,GAAT,EAAcC,KAAd,EAAqB;AAC/CV,IAAAA,GAAG,CAACN,IAAJ,CAAS;AAACgB,MAAAA,KAAK,EAALA;AAAD,KAAT;AACD,GAFH;AAGH,CATD;;AAWA,SAASC,WAAT,CAAqBZ,GAArB,EAA0BC,GAA1B,EAA+BY,IAA/B,EAAoC;AAChC;AACA,MAAMC,YAAY,GAAEd,GAAG,CAACe,OAAJ,CAAY,eAAZ,CAApB,CAFgC,CAGhC;;AACA,MAAG,OAAOD,YAAP,KAAwB,WAA3B,EAAuC;AACnC,QAAME,MAAM,GAAEF,YAAY,CAACG,KAAb,CAAmB,GAAnB,CAAd;AACA,QAAMC,WAAW,GAACF,MAAM,CAAC,CAAD,CAAxB;AACAhB,IAAAA,GAAG,CAACW,KAAJ,GAAUO,WAAV;AACAL,IAAAA,IAAI;AACP,GALD,MAMI;AACAZ,IAAAA,GAAG,CAACkB,UAAJ,CAAe,GAAf;AACH;AACJ;;AAED9B,GAAG,CAACc,IAAJ,CAAS,QAAT,EAAkBS,WAAlB,EAA+B,UAACZ,GAAD,EAAKC,GAAL,EAAW;AACtCO,2BAAIY,MAAJ,CAAWpB,GAAG,CAACW,KAAf,EAAsB,WAAtB,EAAmC,UAACD,GAAD,EAAMW,QAAN,EAAiB;AAChD,QAAGX,GAAH,EAAO;AACHT,MAAAA,GAAG,CAACkB,UAAJ,CAAe,GAAf;AACH,KAFD,MAEM;AACF,UAAMG,MAAM,GAACtB,GAAG,CAACuB,IAAjB;AACApC,MAAAA,KAAK,CAACqC,IAAN,CAAWF,MAAX;AACArB,MAAAA,GAAG,CAACC,IAAJ,CAASf,KAAT;AACH;AACJ,GARD;AASH,CAVD;AAWAE,GAAG,CAACI,GAAJ,CAAQ,WAAR,EAAqBgC,oBAArB;AACApC,GAAG,CAACI,GAAJ,CAAQ,QAAR,EAAkBiC,gBAAlB","sourcesContent":["import express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport dotenv from 'dotenv';\r\n\r\nimport myposts from './model/posts.json';\r\nlet posts=myposts;\r\n\r\nimport postRoutes from './routes/posts.js'\r\nimport messageRoutes from './routes/messages.js'\r\nimport userRoutes from './routes/user.js'\r\n\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst app=express();\r\n\r\nconst PORT=process.env.PORT || 3001;\r\n\r\napp.use(bodyParser.json());\r\n\r\napp.listen(PORT, ()=>{\r\n    console.log(`App is running on port ${PORT}`);\r\n});\r\n\r\napp.get('/', (req, res)=>{\r\n    res.send('welcome to express');\r\n});\r\n\r\n\r\n\r\napp.post('/login', (req, res)=>{\r\n    const user={\r\n        user_id: \"0001\",\r\n        username:\" marius robert\",\r\n        email: \"robert@gmail.com\"\r\n    }\r\n    jwt.sign({user}, 'secretkey', function(err, token) {\r\n        res.json({token});\r\n      });\r\n});\r\n\r\nfunction verifyToken(req, res, next){\r\n    //get auth header values\r\n    const bearerHeader= req.headers['authorization'];\r\n    //check if bearer is undefined\r\n    if(typeof bearerHeader !== 'undefined'){\r\n        const bearer= bearerHeader.split(' ');\r\n        const bearerToken=bearer[1];\r\n        req.token=bearerToken;\r\n        next();\r\n    }\r\n    else{\r\n        res.sendStatus(403);\r\n    }\r\n}\r\n\r\napp.post('/posts',verifyToken, (req,res)=>{\r\n    jwt.verify(req.token, 'secretkey', (err, authData)=>{\r\n        if(err){\r\n            res.sendStatus(403);\r\n        }else {\r\n            const myPost=req.body;\r\n            posts.push(myPost);\r\n            res.send(posts);  \r\n        }\r\n    });\r\n});\r\napp.use('/messages', messageRoutes);\r\napp.use('/users', userRoutes);"],"file":"index.js"}